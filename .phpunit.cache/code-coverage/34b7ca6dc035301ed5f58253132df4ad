a:6:{s:9:"classesIn";a:0:{}s:8:"traitsIn";a:1:{s:42:"Umbrellio\Postgres\Helpers\IndexAssertions";a:6:{s:4:"name";s:15:"IndexAssertions";s:14:"namespacedName";s:42:"Umbrellio\Postgres\Helpers\IndexAssertions";s:9:"namespace";s:26:"Umbrellio\Postgres\Helpers";s:9:"startLine";i:9;s:7:"endLine";i:82;s:7:"methods";a:14:{s:13:"assertNotNull";a:6:{s:10:"methodName";s:13:"assertNotNull";s:9:"signature";s:45:"assertNotNull($actual, string $message): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:11;s:7:"endLine";i:11;s:3:"ccn";i:0;}s:10:"assertSame";a:6:{s:10:"methodName";s:10:"assertSame";s:9:"signature";s:53:"assertSame($expected, $actual, string $message): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:13;s:7:"endLine";i:13;s:3:"ccn";i:0;}s:10:"assertNull";a:6:{s:10:"methodName";s:10:"assertNull";s:9:"signature";s:42:"assertNull($actual, string $message): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:15;s:7:"endLine";i:15;s:3:"ccn";i:0;}s:30:"assertMatchesRegularExpression";a:6:{s:10:"methodName";s:30:"assertMatchesRegularExpression";s:9:"signature";s:86:"assertMatchesRegularExpression(string $pattern, string $string, string $message): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:17;s:7:"endLine";i:21;s:3:"ccn";i:0;}s:10:"assertTrue";a:6:{s:10:"methodName";s:10:"assertTrue";s:9:"signature";s:45:"assertTrue($condition, string $message): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:23;s:7:"endLine";i:23;s:3:"ccn";i:0;}s:11:"assertFalse";a:6:{s:10:"methodName";s:11:"assertFalse";s:9:"signature";s:46:"assertFalse($condition, string $message): void";s:10:"visibility";s:6:"public";s:9:"startLine";i:25;s:7:"endLine";i:25;s:3:"ccn";i:0;}s:8:"seeIndex";a:6:{s:10:"methodName";s:8:"seeIndex";s:9:"signature";s:29:"seeIndex(string $index): void";s:10:"visibility";s:9:"protected";s:9:"startLine";i:27;s:7:"endLine";i:30;s:3:"ccn";i:1;}s:11:"notSeeIndex";a:6:{s:10:"methodName";s:11:"notSeeIndex";s:9:"signature";s:32:"notSeeIndex(string $index): void";s:10:"visibility";s:9:"protected";s:9:"startLine";i:32;s:7:"endLine";i:35;s:3:"ccn";i:1;}s:15:"assertSameIndex";a:6:{s:10:"methodName";s:15:"assertSameIndex";s:9:"signature";s:57:"assertSameIndex(string $index, string $expectedDef): void";s:10:"visibility";s:9:"protected";s:9:"startLine";i:37;s:7:"endLine";i:43;s:3:"ccn";i:1;}s:17:"assertRegExpIndex";a:6:{s:10:"methodName";s:17:"assertRegExpIndex";s:9:"signature";s:59:"assertRegExpIndex(string $index, string $expectedDef): void";s:10:"visibility";s:9:"protected";s:9:"startLine";i:45;s:7:"endLine";i:51;s:3:"ccn";i:2;}s:17:"dontSeeConstraint";a:6:{s:10:"methodName";s:17:"dontSeeConstraint";s:9:"signature";s:53:"dontSeeConstraint(string $table, string $index): void";s:10:"visibility";s:9:"protected";s:9:"startLine";i:53;s:7:"endLine";i:56;s:3:"ccn";i:1;}s:13:"seeConstraint";a:6:{s:10:"methodName";s:13:"seeConstraint";s:9:"signature";s:49:"seeConstraint(string $table, string $index): void";s:10:"visibility";s:9:"protected";s:9:"startLine";i:58;s:7:"endLine";i:61;s:3:"ccn";i:1;}s:15:"getIndexListing";a:6:{s:10:"methodName";s:15:"getIndexListing";s:9:"signature";s:32:"getIndexListing($index): ?string";s:10:"visibility";s:7:"private";s:9:"startLine";i:63;s:7:"endLine";i:68;s:3:"ccn";i:2;}s:22:"existConstraintOnTable";a:6:{s:10:"methodName";s:22:"existConstraintOnTable";s:9:"signature";s:58:"existConstraintOnTable(string $table, string $index): bool";s:10:"visibility";s:7:"private";s:9:"startLine";i:70;s:7:"endLine";i:81;s:3:"ccn";i:2;}}}}s:11:"functionsIn";a:0:{}s:14:"linesOfCodeFor";a:3:{s:11:"linesOfCode";i:83;s:18:"commentLinesOfCode";i:0;s:21:"nonCommentLinesOfCode";i:83;}s:15:"ignoredLinesFor";a:1:{i:0;i:9;}s:17:"executableLinesIn";a:22:{i:11;i:1;i:13;i:2;i:15;i:3;i:21;i:4;i:23;i:5;i:25;i:6;i:29;i:7;i:34;i:8;i:39;i:9;i:41;i:10;i:42;i:11;i:47;i:12;i:49;i:13;i:50;i:14;i:55;i:15;i:60;i:16;i:65;i:17;i:67;i:18;i:72;i:19;i:78;i:19;i:79;i:20;i:80;i:21;}}